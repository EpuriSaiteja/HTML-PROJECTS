//HTML

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic Tac Toe</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="container">
    <h1>Tic Tac Toe</h1>
    <div id="board" class="board"></div>
    <div id="status" class="status"></div>
    <button id="reset-btn">New Game</button>
  </div>
  <script src="script.js"></script>
</body>
</html>

//CSS

body {
  background: linear-gradient(to bottom right, #4CAF50, #2196F3);
  margin: 0;
  padding: 0;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.container {
  text-align: center;
}

.board {
  display: grid;
  grid-template-columns: repeat(3, 100px);
  gap: 5px;
  margin-bottom: 20px;
}

.board div {
  width: 100px;
  height: 100px;
  background-color: #eee;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  cursor: pointer;
}

button {
  font-size: 16px;
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.status {
  font-size: 24px;
  margin-bottom: 20px;
  color: white;
}

//JAVASRIPT

document.addEventListener('DOMContentLoaded', () => {
  const board = document.getElementById('board');
  const status = document.getElementById('status');
  const cells = [];
  let currentPlayer = 'X';

  // Create the tic-tac-toe board
  for (let i = 0; i < 9; i++) {
    const cell = document.createElement('div');
    cell.classList.add('cell');
    cell.dataset.index = i;
    cell.addEventListener('click', () => handleCellClick(cell));
    board.appendChild(cell);
    cells.push(cell);
  }

  // Handle cell click event
  function handleCellClick(cell) {
    if (cell.textContent === '' && !checkWinner()) {
      cell.textContent = currentPlayer;
      if (checkWinner()) {
        status.textContent = `Player ${currentPlayer} wins!`;
      } else if (checkDraw()) {
        status.textContent = 'It\'s a draw!';
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        status.textContent = `Player ${currentPlayer}'s turn`;
      }
    }
  }

  // Check for a winner
  function checkWinner() {
    const winningCombos = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
      [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
      [0, 4, 8], [2, 4, 6]              // Diagonals
    ];

    return winningCombos.some(combo => {
      const [a, b, c] = combo;
      return cells[a].textContent && cells[a].textContent === cells[b].textContent && cells[a].textContent === cells[c].textContent;
    });
  }

  // Check for a draw
  function checkDraw() {
    return cells.every(cell => cell.textContent !== '');
  }

  // Reset the game
  document.getElementById('reset-btn').addEventListener('click', () => {
    cells.forEach(cell => {
      cell.textContent = '';
    });
    currentPlayer = 'X';
    status.textContent = `Player ${currentPlayer}'s turn`;
  });
});
